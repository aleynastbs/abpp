# BNF for the language AB++
<program> ::= <stmts>
<stmts> ::= <stmt> | <stmt> <stmts>
<stmt> ::= <non_if_stmt> | <if_stmt> | <comment>
<non_if_stmt> ::= <single_stmt> | <loop_stmt> | <stmt_group>
<single_stmt> ::= <declaration> | <assignment> | <declaration_assignment> | <expression> | <return_stmt> | <io_stmt> ;
<declaration> ::= <type> <var> | CONST <type> <var>
<type> ::= INT | RAT | STR | BOOL | LIST | FUNC
<var> ::= <char> | <char> <chars>
<chars> ::= <char> | <digit> | <char> <chars> | <digit> <chars>
<char> ::= a | b | c | d | e | f | g | h | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z 
        | A | B | C | D | E | F | G | H | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | _ | -
<digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<assignment> ::= <var> <assignment_op> <expression>
<assignment_op> ::= := | += | -= | *= | /= | ^=
<expression> ::= <or_exp> | <function_exp>
<or_exp> ::= <or_exp> OR <and_exp> | <and_exp>
<and_exp> ::= <and_exp> AND <relational_exp> | <relational_exp>
<relational_exp> ::= <relational_exp> <relational_op> <sum_diff_exp> | <sum_diff_exp>
<relational_op> ::= > | >= | < | <= | ?= | !=
<sum_diff_exp> ::= <sum_diff_exp> <sum_diff_op> <factor> | <factor>
<sum_diff_op> ::= + | -
<factor> ::= <factor> <factor_op> <power> | <power>
<factor_op> ::= * | / | %
<power> ::= <power> ^ <not_exp> | <not_exp>
<not_exp> ::= <term> | <not> <term>
<term> := ( <expression> ) | <id>
<id> ::= <var> | <const>
<const> ::= <int> | <rat> | <bool> | <str> | <list> | <func>
<int> ::= <natural> | <sum_diff_op> <natural>
<natural> ::= <digit> | <digit> <natural>
<rat> ::= <int> . <natural> | . <natural> | <sum_diff_op> . <natural>
<bool> ::= TRUE | FALSE
<str> ::= ' <all_chars> '
<all_chars> ::= <all_char> | <all_char> <all_chars>
<all_char> ::= <char> | <digit> | ! | @ | $ | % | ^ | & | * | ( | ) |   | + | = | { | } | [ | ] | \ | : | ; | , | . | ? | / | < | > | # 
<list> ::= [ <elements> ] | []
<elements> ::= <id> | <id> , <elements>
<func> ::= <type> <func_dec> | <func_dec>
<func_dec> ::= ( <param_decs> ) <stmt> | () <stmt>
<param_decs> ::= <declaration> | <declaration> , <param_decs>
<not> ::= NOT
<function_exp> ::= <var> ( <params> ) | <var> () | <primitive_funcs>
<primitive_funcs> ::= GET_INCLINATION () | GET_ALTITUDE () | GET_TEMPERATURE () | GET_ACCELERATION () | GET_TIME () | TURN_CAMERA () | TAKE_PICTURE () | CONNECT_BASE ()
<params> ::= <id> | <id> , <params>
<if_stmt> ::= <matched> | <unmatched>
<matched> ::= IF <expression> : <matched> ELSE <matched> | <non_if_stmt>
<unmatched> ::= IF <expression> : <stmt> | IF <expression> : <matched> ELSE <unmatched>
<loop_stmt> ::= <while_stmt> | <for_stmt>
<while_stmt> ::= WHILE <expression> : <stmt>
<for_stmt> ::= FOR <for_dec> ; <expression> ; <assignment> : <stmt> | FOR ; <expression> ; <assignment> : <stmt>
<for_dec> ::= <assignment> | <declaration_assignment>
<stmt_group> ::= { <stmts> }
<return_stmt> ::= RETURN ; | RETURN <expression> ;
<io_stmt> ::= <i_stmt> | <o_stmt>
<i_stmt> ::= INPUT <id>
<o_stmt> ::= OUTPUT <id>
<comment> ::= # <all_chars> \n